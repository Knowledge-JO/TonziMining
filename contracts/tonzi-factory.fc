#include "imports/stdlib.fc";
#include "./tonzi-utils.fc";
#include "./op-codes.fc";

{-
    deposit() -  on deposit create a new contract for the 
    depositor. A contract that stores the amount of TonziMiner each depositor has. 

    Tonzi miner generation() - depending on the deposit of the depositor, the TVL and mining in circulation. The factory contract will hold all Tonzi Miner for mining. 

    Daily percentage calculation() - based on TVL, users profit taking habit, reinvestment.abs()

    Compounding() - Allowing users to reinvest their flowing profits


    claim rewards() - users can claim their rewards anytime.

    fee structure and revenue generation() - 5% fee charge on both deposit and withdrawal of funds
-}

;; Tonzi-wallet code
;; 


(int, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    int total_value_locked = ds~load_coins();
    slice admin_addr = ds~load_msg_addr();
    cell tonzi_wallet_code = ds~load_ref();

    return (total_value_locked, admin_addr, tonzi_wallet_code);
}

() save_data(int total_value_locked, slice admin_addr, cell tonzi_wallet_code) impure inline {
    set_data(
        begin_cell()
        .store_coins(total_value_locked)
        .store_slice(admin_addr)
        .store_ref(tonzi_wallet_code)
        .end_cell()
    );
}


() deposit(int deposit_amount, slice msg_sender) impure {
   
     ;; send message to indidual user contract with the deposited funds
    
    ;; calculate how much minter is gotten from deposited funds,
    ;; this should also go to individual user contract?

    ;; calculate tonzi wallet where funds will be going

    (int total_value_locked, slice admin_addr, cell tonzi_wallet_code) = load_data();

    cell state_init = calculate_tonzi_wallet_state_init(msg_sender, my_address(), tonzi_wallet_code);
    slice tonzi_user_wallet_address = calculate_tonzi_wallet_address(state_init);
    int msg_mode = 1;
    total_value_locked += deposit_amount;

    var msg_body = begin_cell()
        .store_uint(op::ton_deposit(), 32)
        .store_coins(deposit_amount)
        .store_coins(total_value_locked)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(tonzi_user_wallet_address)
        .store_coins(deposit_amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(),msg_mode);

    save_data(total_value_locked,admin_addr,tonzi_wallet_code);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()){
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice msg_sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int deposit_amount = msg_value;
    if(op == 1){
        ;; deposit
        
        deposit(deposit_amount, msg_sender);
    }

    if(op ==  2){
        ;; claim rewards
    }

    if(op == 3) {
        ;; compound
    }
}


slice get_user_tonzi_wallet_address(slice user_address) method_id {
    (int total_value_locked, slice admin_addr, cell tonzi_wallet_code) = load_data();
    return calculate_user_tonzi_wallet_address(user_address, my_address(), tonzi_wallet_code);
}